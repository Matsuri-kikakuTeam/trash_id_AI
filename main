import requests
import json
from datetime import datetime

def get_api_token():
    """
    APIにログインしてトークンを取得する。
    """
    url = 'https://api.m2msystems.cloud/login'
    mail = "development+20211103@matsuri-tech.com"
    password = "rYGOOh9PgUxFhjhd"


    payload = {"email": mail, "password": password}

    print("[INFO] === get_api_token: Start ===")
    try:
        response = requests.post(url, json=payload)
        print("[DEBUG] Login response status code:", response.status_code)
        if response.status_code == 200:
            json_data = response.json()
            token = json_data.get('accessToken')
            if token:
                print("[INFO] Successfully retrieved token.")
                print("[DEBUG] Token (first 20 chars):", token[:20], "...")
                print("[INFO] === get_api_token: End ===\n")
                return token
            else:
                print("[ERROR] Token not found in response.")
                print("[INFO] === get_api_token: End ===\n")
                return None
        else:
            print("[ERROR] Failed to get token:", response.text)
            print("[INFO] === get_api_token: End ===\n")
            return None
    except requests.exceptions.RequestException as e:
        print("[ERROR] Exception in get_api_token:", e)
        print("[INFO] === get_api_token: End ===\n")
        return None


def get_today_cleanings(token: str, target_photo_tour_id: str) -> list:
    """
    Bearer token を用いて、当日の清掃情報を取得。
    さらに photoTourId == target_photo_tour_id のものだけを抽出。

    - 日付は固定で "2025-01-28" に設定
    - 戻り値: [{"id":..., "photoTourId":..., ...}, ...]
    """
    print("[INFO] === get_today_cleanings: Start ===")
    url = "https://api-cleaning.m2msystems.cloud/v4/operations/search"
    print("[DEBUG] Cleaning search URL:", url)

    # 今日の日付(固定。必要に応じて動的にdatetime.now().strftime("%Y-%m-%d")に変更)
    today_str = datetime.today().strftime('%Y-%m-%d')
    print("[DEBUG] Target date:", today_str)

    payload = {
        "startDate": today_str,
        "endDate": today_str
    }
    print("[DEBUG] Request payload:", payload)

    headers = {
        "Authorization": f"Bearer {token}",
        "Content-Type": "application/json"
    }

    try:
        print("[INFO] Sending POST request for cleaning list...")
        response = requests.post(url, headers=headers, json=payload)
        print("[DEBUG] Response status code:", response.status_code)
        # ログが長くなる場合は部分的に表示
        print("[DEBUG] Response text (partial):", response.text[:300], "...")

        if response.status_code == 200:
            data = response.json()
            if not isinstance(data, list):
                print("[WARN] The response is not a list as expected. data =", data)
                print("[INFO] === get_today_cleanings: End ===\n")
                return []

            print(f"[DEBUG] Total cleanings count: {len(data)}")

            # (A) フィルタ: photoTourId == target_photo_tour_id
            filtered = []
            for c in data:
                if c.get("photoTourId") == target_photo_tour_id:
                    # 必要なキーだけ取り出してもよいし、このまま全要素を保持してもOK
                    filtered.append({
                        "id": c.get("id"),
                        "photoTourId": c.get("photoTourId"),
                        "placementId": c.get("placementId"),
                        "commonAreaName": c.get("commonAreaName"),
                        "status": c.get("status"),
                        "cleaningDate": c.get("cleaningDate"),
                        # 他にも必要なら追加
                    })

            print(f"[DEBUG] Filtered by photoTourId='{target_photo_tour_id}'. Count: {len(filtered)}")

            print("[INFO] === get_today_cleanings: End ===\n")
            return filtered
        else:
            print("[ERROR] Server returned error while getting cleanings:", response.text)
            print("[INFO] === get_today_cleanings: End ===\n")
            return []
    except requests.exceptions.RequestException as e:
        print("[ERROR] Exception in get_today_cleanings:", e)
        print("[INFO] === get_today_cleanings: End ===\n")
        return []


def get_commonAreaId(token: str, cleaning_data: dict) -> dict:
    operation_id = cleaning_data.get("id")
    if not operation_id:
        print("[ERROR] Cleaning data does not contain 'id'. Cannot retrieve commonAreaId.")
        return cleaning_data

    url = f"https://api-cleaning.m2msystems.cloud/v4/operations/{operation_id}"

    headers = {
        "Authorization": f"Bearer {token}",
        "Accept": "application/json"
    }

    try:
        response = requests.get(url, headers=headers)

        if response.status_code == 200:
            print("[INFO] Successfully retrieved operation data.")
            data = response.json()
            # 'commonAreaId' を取得
            common_area_id = data.get('commonAreaId', None)
            if common_area_id:
                cleaning_data["commonAreaId"] = common_area_id  # commonAreaIdを追加
                return cleaning_data
            else:
                print("[ERROR] commonAreaId not found in response.")
                return cleaning_data
        else:
            print(f"[ERROR] Failed to retrieve data. Status Code: {response.status_code}")
            print("[DEBUG] Response:", response.text)
            return cleaning_data

    except requests.exceptions.RequestException as e:
        print(f"[ERROR] Request failed: {e}")
        return cleaning_data

def enrich_cleaning_data_with_common_area_id(token: str, cleaning_data: dict) -> dict:
    """
    清掃データに対して commonAreaId を追加する処理。
    """
    enriched_data = get_commonAreaId(token, cleaning_data)
    return enriched_data

def enrich_multiple_cleanings_with_common_area_id(token: str, cleaning_list: list) -> list:
    """
    清掃データ(複数) に対して全ての commonAreaId を付与する処理。
    """
    enriched = []
    for cleaning in cleaning_list:
        enriched.append(enrich_cleaning_data_with_common_area_id(token, cleaning))
    return enriched



def get_photo_tour_images_by_cleaning_id(token: str, cleaning_id: str) -> list:
    """
    指定した cleaning_id の Photo Tour 画像情報(複数) を取得。
    レスポンスは {"images": [...] } の構造を想定し、
    各要素の "url" をリスト化して返す。
    """
    print(f"[INFO] === get_photo_tour_images_by_cleaning_id({cleaning_id}): Start ===")

    url = f"https://api-cleaning.m2msystems.cloud/v3/photo_tour_images/by_cleaning_id/{cleaning_id}"
    print("[DEBUG] GET URL:", url)

    headers = {
        "Authorization": f"Bearer {token}",
        "Accept": "application/json"
    }

    try:
        response = requests.get(url, headers=headers)
        print("[DEBUG] Status Code:", response.status_code)
        print("[DEBUG] Response text (partial):", response.text[:300], "...")
        if response.status_code == 200:
            data = response.json()
            # data = { "images": [ { "id":..., "url":... }, ... ] }
            images_array = data.get("images", [])
            if not isinstance(images_array, list):
                print("[ERROR] 'images' field is not a list. data =", data)
                return []

            urls = []
            for img_obj in images_array:
                url_value = img_obj.get("url")
                if url_value:
                    urls.append(url_value)

            print(f"[INFO] Found {len(urls)} image(s).")
            print("[INFO] === get_photo_tour_images_by_cleaning_id: End ===\n")
            return urls
        else:
            print("[ERROR] Server returned an error:", response.text)
            print("[INFO] === get_photo_tour_images_by_cleaning_id: End ===\n")
            return []
    except requests.RequestException as e:
        print("[ERROR] Request exception:", e)
        print("[INFO] === get_photo_tour_images_by_cleaning_id: End ===\n")
        return []


def add_images_to_cleaning(token: str, cleaning_data: dict) -> dict:
    """
    1件の清掃データ(dict)を受け取り、対応する複数画像URLを取得し、
    "urls" フィールドとして格納して返す。
    """
    cid = cleaning_data.get("id")
    if not cid:
        print("[WARN] cleaning_data に 'id' が無いため画像取得不可.")
        cleaning_data["urls"] = []
        return cleaning_data

    # 複数URLをリストで取得
    image_urls = get_photo_tour_images_by_cleaning_id(token, cid)
    cleaning_data["urls"] = image_urls  # リストをそのまま詰める

    return cleaning_data


def enrich_multiple_cleanings_with_images(token: str, cleaning_list: list) -> list:
    """
    清掃データ(複数) に対して、全ての画像URLを付与。
    "urls" キーに [url1, url2, ...] が入る形で返す。
    """
    enriched = []
    for c in cleaning_list:
        new_c = add_images_to_cleaning(token, c)
        enriched.append(new_c)
    return enriched






# 1) クラス判定を行うエンドポイント (Trash_id_AI)
URL_JUDGE = "https://us-central1-m2m-core.cloudfunctions.net/Trash_id_AI"

# 2) 判定結果が「ストッカー」だった場合に呼び出すエンドポイント
URL_STOCKER = "https://us-central1-m2m-core.cloudfunctions.net/Trash_stocker_id_AI"

# 3) 判定結果が「ゴミ庫」だった場合に呼び出すエンドポイント
URL_PLACE = "https://us-central1-m2m-core.cloudfunctions.net/Trash_place_id_AI"

def judge_trash(image_urls: list, placement_id: str, unique_name: str, cleaning_id: str, common_area_id: str) -> list:
    """
    複数の画像URLと個別IDを受け取り、判定を行う。
    画像URLが空の場合は判定をスキップするが、空の場合にも結果を出力する。
    """
    results = []

    for image_url in image_urls:
        if not image_url:  # 画像URLが空の場合
            results.append({
                "url": "",
                "object": "画像無し",  # 画像がない場合
                "result": "画像無し",  # 画像がない場合
                "placement_id": placement_id,
                "name": unique_name,
                "cleaning_id": cleaning_id
            })
            continue  # 次の画像へ

        # (A) 1回目: ゴミ庫/ストッカーを判定
        payload = {"urls": [image_url]}
        response_judge = requests.post(URL_JUDGE, json=payload)
        response_judge_data = response_judge.json()

        # 判定結果が空の場合（想定外のレスポンス）
        results_first = response_judge_data.get("results", [])
        if not results_first:
            results.append({
                "url": image_url,
                "result": "判定不可 (1回目の結果なし)",
                "placement_id": placement_id,
                "name": unique_name,
                "cleaning_id": cleaning_id
            })
            continue  # 次の画像へ

        # 1件だけ取り出し
        first_item = results_first[0]
        first_result_label = first_item.get("result", "")  # 例: "ストッカー" or "ゴミ庫"

        # 2回目の判定（ストッカー or ゴミ庫）
        final_result = "不明"

        if first_result_label == "ストッカー":
            resp = requests.post(URL_STOCKER, json=payload)
            resp_data = resp.json()
            results_second = resp_data.get("results", [])
            if results_second:
                second_label = results_second[0].get("result", "")
                if second_label.endswith("〇"):
                    final_result = "〇"
                elif second_label.endswith("×"):
                    final_result = "×"
                else:
                    final_result = second_label  # 想定外の場合そのまま保持
            else:
                final_result = "判定不可 (2回目のストッカー結果なし)"

        elif first_result_label == "ゴミ庫":
            resp = requests.post(URL_PLACE, json=payload)
            resp_data = resp.json()
            results_second = resp_data.get("results", [])
            if results_second:
                second_label = results_second[0].get("result", "")
                if second_label.endswith("〇"):
                    final_result = "〇"
                elif second_label.endswith("×"):
                    final_result = "×"
                else:
                    final_result = second_label
            else:
                final_result = "判定不可 (2回目のゴミ庫結果なし)"

        else:
            final_result = f"予想外のラベル: {first_result_label}"

        # 結果をリストに追加
        results.append({
            "url": image_url,
            "object": first_result_label,
            "result": final_result,
            "placement_id": placement_id,
            "commonAreaId":common_area_id,
            "name": unique_name,
            "cleaning_id": cleaning_id
        })

    return results



def filter_success_results(results: list) -> list:
    """結果リストから「〇」のみを抽出"""
    return [item for item in results if item.get("result") == "〇"]


import os
import json
from google.auth.transport.requests import Request
from google.oauth2 import service_account
from googleapiclient.discovery import build
from datetime import datetime

# サービスアカウント認証
SERVICE_ACCOUNT_FILE = 'm2m-core-08fd5de67ae7.json'  # アップロードしたJSONキーのパス
SCOPES = ['https://www.googleapis.com/auth/spreadsheets']

# 認証の取得
creds = service_account.Credentials.from_service_account_file(
    SERVICE_ACCOUNT_FILE, scopes=SCOPES)

# Sheets APIを利用するためのサービスオブジェクトを作成
service = build('sheets', 'v4', credentials=creds)

# スプレッドシートのID
spreadsheet_id = '1cV_8DH4wLZu7--J9vxIH0rFf7upKa1cKACyDNaONxp0'  # ここに使用するスプレッドシートIDを指定

def write_to_sheet(data, sheet_name="判定一覧"):
    """
    final_resultのデータを指定したGoogle Sheetsのシートに書き込む関数
    """
    range_name = f'{sheet_name}!A2:G'  # 書き込む範囲を指定 (A1からG列)

    # 1行目にヘッダーを設定（新しく"commonAreaId"列も追加）
    header = ['Cleaning ID', 'Name', 'Placement ID', 'Result', 'URL', 'Object', 'Common Area ID']
    values = [header]

    # `data` から値を取り出してリストに追加
    for item in data:
        row = [
            item.get('cleaning_id'),   # Cleaning ID
            item.get('name'),          # Name
            item.get('placement_id'),  # Placement ID
            item.get('result'),        # Result (〇 or ×)
            item.get('url'),           # URL
            item.get('object', ''),    # Object (判定結果: ストッカー or ゴミ庫)
            item.get('commonAreaId', '')  # CommonAresID
        ]
        values.append(row)

    # Sheets APIにデータを書き込む
    request = service.spreadsheets().values().update(
        spreadsheetId=spreadsheet_id, range=range_name,
        valueInputOption="RAW", body={"values": values}
    )
    response = request.execute()

    # 「判別終了」をI2セルに表示
    update_status_range = "判定一覧!I2"
    update_status_values = [["判別終了"]]

    request_status = service.spreadsheets().values().update(
        spreadsheetId=spreadsheet_id, range=update_status_range,
        valueInputOption="RAW", body={"values": update_status_values}
    )
    request_status.execute()  # 実行

    return response





def main(request):
    """
    メインの処理:
      1) トークン取得
      2) 当日の清掃データを取得 (特定 photoTourId に該当)
      3) commonAreaId を追加
      4) 画像URLリストを追加
      5) 判定を行い、結果を表示・保存
    """
    # 1) トークン取得
    token = get_api_token()
    if not token:
        print("[ERROR] Could not retrieve token. Exiting.")
        return

    # 2) 当日の清掃データを取得 (例: photoTourId = "0a8b54c9-1d99-460b-9085-4bdfe56af9ce")
    target_photo_tour_id = "0a8b54c9-1d99-460b-9085-4bdfe56af9ce"
    filtered_cleanings = get_today_cleanings(token, target_photo_tour_id)

    if not filtered_cleanings:
        print("[ERROR] No cleanings found for the given photoTourId.")
        return

    # 3) 各清掃データに対して commonAreaId を追加
    print("[INFO] Enriching cleaning data with commonAreaId...")
    enriched_cleanings = enrich_multiple_cleanings_with_common_area_id(token, filtered_cleanings)

    # デバッグログ：commonAreaIdを追加した後のデータ
    print("[INFO] Final enriched cleanings with commonAreaId added:")
    print(json.dumps(enriched_cleanings, ensure_ascii=False, indent=2))

    # 4) 複数の清掃に対して画像URLを追加
    ai_data = enrich_multiple_cleanings_with_images(token, enriched_cleanings)

    if not ai_data:
        print("[ERROR] No AI data available after enrichment.")
        return

    # 5) AI判定を行う
    result = []  # 結果を格納するリスト
    for cleaning in ai_data:
        image_urls = cleaning["urls"]
        placement_id = cleaning["placementId"]
        commonarea_name = cleaning["commonAreaName"]
        cleaning_id = cleaning["id"]
        common_area_id = cleaning["commonAreaId"]  # commonAreaIdを取得
        print(f"[INFO] Processing cleaning_id: {cleaning_id} with commonAreaId: {common_area_id}")

        for url in image_urls:
            # AI結果を取得
            judge_result = judge_trash([url], placement_id, commonarea_name, cleaning_id, common_area_id)
            if judge_result:
                result.extend(judge_result)  # 画像ごとに判定結果を追加

    # 6) 結果を最終的に表示または保存する
    print("[INFO] Final judgment result:")
    print(json.dumps(result, ensure_ascii=False, indent=2))

    # 7) 「〇」のみをフィルタリング
    success_results = filter_success_results(result)
    print("\n[INFO] Success results (〇 only):")
    print(json.dumps(success_results, ensure_ascii=False, indent=2))

    # 8) 最終的に1つの辞書として返す
    final_result = {
        "result": result,
        "success_results": success_results
    }

    # `final_result["result"]` をGoogle Sheetsの「判定一覧」シートに書き込む
    write_to_sheet(final_result["result"], sheet_name="判定一覧")


    return final_result
